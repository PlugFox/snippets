{
  "Main file": {
    "scope": "c",
    "prefix": ["main", "sst", "libsst"],
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <string.h>",
      "// #include <errno.h>",
      "",
      "int main(int argc, char **argv) {",
      "  printf(\"Arguments:\\n\");",
      "  for (int i = 0; i < argc; i++)",
      "    printf(\"arg[%d] = %s\", i, argv[i]);",
      "  $0",
      "  //exit(EXIT_FAILURE);",
      "  return EXIT_SUCCESS;",
      "}"
    ],
    "description": "A standard starter template for a C program"
  },
  "If statement": {
    "scope": "c",
    "prefix": "if",
    "body": ["if ($0) {", "    $1", "}"],
    "description": "Creates an if statement"
  },
  "Else if statement": {
    "scope": "c",
    "prefix": "elif",
    "body": ["else if ($0) {", "    $1", "}"],
    "description": "Creates an else if statement"
  },
  "Else statement": {
    "scope": "c",
    "prefix": "else",
    "body": ["else {", "    $0", "}"],
    "description": "Creates an else statement"
  },
  "For loop": {
    "scope": "c",
    "prefix": "for",
    "body": ["for (int i = 0; i < $0; i++) {", "    $1", "}"],
    "description": "Creates a for loop that runs for a certain number if iterations"
  },
  "While loop": {
    "scope": "c",
    "prefix": "while",
    "body": ["while ($0) {", "    $1", "}"],
    "description": "Creates a while loop"
  },
  "Do...while loop": {
    "scope": "c",
    "prefix": "dowhile",
    "body": ["do {", "    $1", "} while($0)"],
    "description": "Creates a do...while loop"
  },
  "Create linked list": {
    "scope": "c",
    "prefix": "clist",
    "body": [
      "typedef struct _node * Link;",
      "typedef struct _node node;",
      "struct _node {",
      "    int value;",
      "    Link next;",
      "};"
    ],
    "description": "Creates a linked list template"
  },
  "Function declaration": {
    "scope": "c",
    "prefix": "func",
    "body": [
      "${1:return_type} ${2:function_name}(${3:parameters}) {",
      "    $0",
      "}"
    ],
    "description": "Create a function declaration"
  },
  "Create int function": {
    "scope": "c",
    "prefix": "intfunc",
    "body": ["int $1 () {", "    int $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the int type"
  },
  "Create float function": {
    "scope": "c",
    "prefix": "flfunc",
    "body": ["float $2 () {", "    float $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the float type"
  },
  "Create double function": {
    "scope": "c",
    "prefix": "doubfunc",
    "body": ["double $2 () {", "    double $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the double type"
  },
  "Create string function": {
    "scope": "c",
    "prefix": "strfunc",
    "body": ["char[] $1 () {", "    char[] $0 = {};", "    return $0;", "}"],
    "description": "Creates a function that returns the char array type"
  },
  "Create long function": {
    "scope": "c",
    "prefix": "longfunc",
    "body": ["long $1 () {", "    long $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the long type"
  },
  "Create definition for virtual table": {
    "scope": "c",
    "prefix": "vtdef",
    "body": [
      "typedef struct ${1:ClassName}{",
      "    struct ${2:$1VT}* vt;    ",
      "};",
      "",
      "typedef struct $2",
      "{",
      "    // Virtual Table Function definitions",
      "} ${3:vt$1};",
      "",
      "",
      "int $1Init(struct $1 *self);",
      "int $1Destroy(struct $1 **self);"
    ],
    "description": "Create definition for virtual table"
  },
  "Create function for virtual table": {
    "scope": "c",
    "prefix": "vtfunc",
    "body": ["${1:void} (*${2:functionName})(struct ${3:ClassName} *self)"],
    "description": "Create function for virtual table"
  },
  "Print variable of type float (2 decimal places)": {
    "scope": "c",
    "prefix": "pflo",
    "body": ["printf(\"$0 :>> %.2f\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
  },
  "Print variable of type integer": {
    "scope": "c",
    "prefix": "pint",
    "body": ["printf(\"$0 :>> %d\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },
  "Print variable of type char": {
    "scope": "c",
    "prefix": "pcha",
    "body": ["printf(\"$0 :>> %c\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type char"
  },
  "Print variable of type pointer": {
    "scope": "c",
    "prefix": "ppoint",
    "body": ["printf(\"$0 :>> %p\\n\", (void *) $0);"],
    "description": "Calls printf() to log value of variable of type pointer"
  },
  "Print variable of type size_t": {
    "scope": "c",
    "prefix": "psiz",
    "body": ["printf(\"$0 :>> %zu\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type size_t"
  },
  "Allocate memory using calloc": {
    "scope": "c",
    "prefix": ["cal", "calloc"],
    "body": [
      "${1:type} *${2:pointer}Ptr = (${1} *) calloc(${3:size}, sizeof(${1}));",
      "",
      "if (${2}Ptr == NULL)",
      "{",
      "  printf(\"Memory allocation failed!\\n\");",
      "  exit(EXIT_FAILURE);",
      "}",
      "",
      "free(${2}Ptr);"
    ],
    "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
  },
  "Allocate memory using malloc": {
    "scope": "c",
    "prefix": ["mal", "malloc"],
    "body": [
      "${1:type} * ${2:pointer}Ptr = (${1} *) malloc(sizeof($1) * ${3:size});",
      "",
      "if (${2}Ptr == NULL)",
      "{",
      "  printf(\"Memory allocation failed!\\n\");",
      "  exit(EXIT_FAILURE);",
      "}",
      "",
      "free(${2}Ptr);"
    ],
    "description": "Allocates memory to a pointer variable using malloc(), then deallocates using free()."
  },
  "Rallocate memory using realloc": {
    "scope": "c",
    "prefix": ["rea", "realloc"],
    "body": [
      "${1:pointer} = (${1} *) realloc(${1}, sizeof(${1}) * ${2:size});"
    ],
    "description": "Resize allocated memory using realloc."
  },
  "Free allocated memory": {
    "scope": "c",
    "prefix": "free",
    "body": ["free(${1:pointer});", "${1:pointer} = NULL;"],
    "description": "Free allocated memory using free"
  },
  "Creates a header include guard": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": [
      "ig",
      "hguard",
      "guard",
      "includeguard",
      "header",
      "headerguard"
    ],
    "body": [
      "#ifndef ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "#define ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "",
      "// Code for header body",
      "",
      "#endif //${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}"
    ],
    "description": "Creates header include guard based on file name"
  },
  "include header": {
    "scope": "c",
    "prefix": "include",
    "body": ["#include \"${1:header_file}.h\""],
    "description": "Include a header file"
  },
  "struct declaration": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "struct",
    "body": ["typedef struct ${1:struct_name} {", "    $0", "} $1;"],
    "description": "Create a struct declaration"
  },
  "enum declaration": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "enum",
    "body": ["typedef enum ${1:enum_name} {", "    $0", "} $1;"],
    "description": "Create an enum declaration"
  },
  "function prototype": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "proto",
    "body": ["${1:return_type} ${2:function_name}(${3:parameters});"],
    "description": "Create a function prototype"
  },
  "printf": {
    "scope": "c",
    "prefix": "printf",
    "body": ["printf(\"${1:%s}\\n\", ${2});"],
    "description": "Insert a printf statement"
  },
  "scanf": {
    "scope": "c",
    "prefix": "scanf",
    "body": ["scanf(\"${1:%s}\", &${2});"],
    "description": "Insert a scanf statement"
  },
  "error handling": {
    "scope": "c",
    "prefix": ["err", "error"],
    "body": [
      "if (${1:condition}) {",
      "    fprintf(stderr, \"${2:Error message}\\n\");",
      "    exit(${3:EXIT_FAILURE});",
      "}"
    ],
    "description": "Insert an error handling block"
  },
  "export symbol": {
    "scope": "c",
    "prefix": "export",
    "body": [
      "#ifdef _WIN32",
      "    #ifdef ${1:LIBRARY_NAME}_EXPORTS",
      "        #define ${1:LIBRARY_API} __declspec(dllexport)",
      "    #else",
      "        #define ${1:LIBRARY_API} __declspec(dllimport)",
      "    #endif",
      "#else",
      "    #define ${1:LIBRARY_API}",
      "#endif"
    ],
    "description": "Create a macro for exporting symbols in a shared library"
  },
  "extern variable": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "extern",
    "body": ["extern ${1:type} ${2:variable_name};"],
    "description": [
      "Declare an extern variable. ",
      "This snippet is typically used in header files (.h) to declare a global variable that is defined in a source file (.c). ",
      "By using extern, you inform the compiler that the variable is declared elsewhere, ",
      "and the linker will resolve the reference during the linking process."
    ]
  },
  "extern function": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "externfunc",
    "body": ["extern ${1:return_type} ${2:function_name}(${3:parameters});"],
    "description": [
      "Declare an extern function. ",
      "This snippet is typically used in header files (.h) to declare a function that is defined in a different source file (.c). ",
      "The extern keyword is optional for function declarations because functions have external linkage by default. ",
      "However, you can use it explicitly if you prefer."
    ]
  },
  "extern C": {
    "scope": "c, cpp, header, .h, .hpp",
    "prefix": "externc",
    "body": [
      "#ifdef __cplusplus",
      "extern \"C\" {",
      "#endif",
      "",
      "$0",
      "",
      "#ifdef __cplusplus",
      "}",
      "#endif"
    ],
    "description": [
      "Add extern C block for C++ compatibility. ",
      "This snippet is used in header files (.h) when you want to use C functions in a C++ project. ",
      "By wrapping your C function declarations in an extern \"C\" block, ",
      "you tell the C++ compiler to use C linkage for these functions, avoiding name mangling issues. ",
      "You don't need to use this snippet in C projects or in source files (.c)."
    ]
  }
}

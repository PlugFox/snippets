{
  "Main file": {
    "scope": "c",
    "prefix": ["main", "sst", "libsst"],
    "body": [
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <string.h>",
      "// #include <errno.h>",
      "",
      "extern int errno;",
      "",
      "int main(int argc, char **argv) {",
      "  printf(\"Arguments:\\n\");",
      "  for (int i = 0; i < argc; i++)",
      "    printf(\"arg[%d] = %s\", i, argv[i]);",
      "  //exit(EXIT_FAILURE);",
      "  return EXIT_SUCCESS;",
      "}"
    ],
    "description": "A standard starter template for a C program"
  },
  "If statement": {
    "scope": "c",
    "prefix": "if",
    "body": ["if ($0) {", "    /* code here */ ", "}"],
    "description": "Creates an if statement"
  },
  "Else if statement": {
    "scope": "c",
    "prefix": "elif",
    "body": ["else if ($0) {", "    /* code here */ ", "}"],
    "description": "Creates an else if statement"
  },
  "Else statement": {
    "scope": "c",
    "prefix": "else",
    "body": ["else {", "    /* code here */ ", "}"],
    "description": "Creates an else statement"
  },
  "For loop": {
    "scope": "c",
    "prefix": "for",
    "body": ["for (int i = 0; i < $0; i++) {", "    /* code here */ ", "}"],
    "description": "Creates a for loop that runs for a certain number if iterations"
  },
  "While loop": {
    "scope": "c",
    "prefix": "while",
    "body": ["while ($0) {", "    /* code here */ ", "}"],
    "description": "Creates a while loop"
  },
  "Do...while loop": {
    "scope": "c",
    "prefix": "dowhile",
    "body": ["do {", "    /* code here */ ", "} while($0)"],
    "description": "Creates a do...while loop"
  },
  "Create linked list": {
    "scope": "c",
    "prefix": "clist",
    "body": [
      "typedef struct _node * Link;",
      "typedef struct _node node;",
      "struct _node {",
      "    int value;",
      "    Link next;",
      "};"
    ],
    "description": "Creates a linked list template"
  },
  "Create int function": {
    "scope": "c",
    "prefix": "intfunc",
    "body": ["int $1 () {", "    int $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the int type"
  },
  "Create float function": {
    "scope": "c",
    "prefix": "flfunc",
    "body": ["float $2 () {", "    float $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the float type"
  },
  "Create double function": {
    "scope": "c",
    "prefix": "doubfunc",
    "body": ["double $2 () {", "    double $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the double type"
  },
  "Create string function": {
    "scope": "c",
    "prefix": "strfunc",
    "body": ["char[] $1 () {", "    char[] $0 = {};", "    return $0;", "}"],
    "description": "Creates a function that returns the char array type"
  },
  "Create long function": {
    "scope": "c",
    "prefix": "longfunc",
    "body": ["long $1 () {", "    long $0;", "    return $0;", "}"],
    "description": "Creates a function that returns the long type"
  },
  "Create definition for virtual table": {
    "scope": "c",
    "prefix": "vtdef",
    "body": [
      "typedef struct ${1:ClassName}{",
      "    struct ${2:$1VT}* vt;    ",
      "};",
      "",
      "typedef struct $2",
      "{",
      "    // Virtual Table Function definitions",
      "} ${3:vt$1};",
      "",
      "",
      "int $1Init(struct $1 *self);",
      "int $1Destroy(struct $1 **self);"
    ],
    "description": "Create definition for virtual table"
  },
  "Create function for virtual table": {
    "scope": "c",
    "prefix": "vtfunc",
    "body": ["${1:void} (*${2:functionName})(struct ${3:ClassName} *self)"],
    "description": "Create function for virtual table"
  },
  "Print variable of type float (2 decimal places)": {
    "scope": "c",
    "prefix": "pflo",
    "body": ["printf(\"$0 :>> %.2f\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type float rounded to 2 decimal places"
  },
  "Print variable of type integer": {
    "scope": "c",
    "prefix": "pint",
    "body": ["printf(\"$0 :>> %d\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type signed integer"
  },
  "Print variable of type char": {
    "scope": "c",
    "prefix": "pcha",
    "body": ["printf(\"$0 :>> %c\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type char"
  },
  "Print variable of type pointer": {
    "scope": "c",
    "prefix": "ppoint",
    "body": ["printf(\"$0 :>> %p\\n\", (void *) $0);"],
    "description": "Calls printf() to log value of variable of type pointer"
  },
  "Print variable of type size_t": {
    "scope": "c",
    "prefix": "psiz",
    "body": ["printf(\"$0 :>> %zu\\n\", $0);"],
    "description": "Calls printf() to log value of variable of type size_t"
  },
  "Allocate memory using calloc": {
    "scope": "c",
    "prefix": "cal",
    "body": [
      "$1*ptr = ($1*)calloc($2, sizeof($1));",
      "",
      "if (ptr == NULL)",
      "{",
      "  printf(\"Memory allocation failed!\\n\");",
      "  exit(EXIT_FAILURE);",
      "}",
      "",
      "free(ptr);"
    ],
    "description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
  },
  "Allocate memory using malloc": {
    "scope": "c",
    "prefix": "mal",
    "body": [
      "$1*ptr = ($1*)malloc(sizeof($1));",
      "",
      "if (ptr == NULL)",
      "{",
      "  printf(\"Memory allocation failed!\\n\");",
      "  exit(EXIT_FAILURE);",
      "}",
      "",
      "free(ptr);"
    ],
    "description": "Allocates memory to a pointer variable using malloc(), then deallocates using free()."
  },
  "Creates a header include guard": {
    "scope": "c",
    "prefix": "ig",
    "body": [
      "#ifndef ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "#define ${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}",
      "",
      "// Code for header body",
      "",
      "#endif //${TM_FILENAME/(?:^.*\\\\)?(\\w+)\\W?/${1:/upcase}_/g}"
    ],
    "description": "Creates header include guard based on file name"
  }
}
